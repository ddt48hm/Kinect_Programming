{"name":"Kinect programming","tagline":"I'll upload Kinect Programming source codes here.","body":"### はじめに\r\nこのページは大学の授業で行ったKinect演習の中間レポートである。<br/>\r\nチームを組んでKinectプログラミングを行ったときに経験したことをまとめた。<br/>\r\n\r\n### 制作概要\r\n私たちは大学の授業でTeam DaruMAというチームを組んだ。<br/>\r\nチーム制作ではKinectを用いてだるまさんが転んだが出来るゲームの制作を行った。<br/>\r\n制作を行う前に、Kinectの前でだるまさんが転んだをやるにはKinectの認識範囲(80cm~4m)は<br/>\r\n短すぎるという話し合いになったので、Kinectの認識範囲内を往復するシャトルラン形式での<br/>\r\nだるまさんが転んだの実装を行うことにした。<br/>\r\n\r\n### システム概要\r\n制作したシステムは「だるまさんが転んだ」と「シャトルラン」の要素を持っていたので「だるまさんシャトルラン」と命名した。\r\n「だるまさんシャトルラン」ではKinectの認識範囲以外にも解決事項があった。<br/>\r\nその要件定義を以下にリストとしてまとめた。\r\n  * Kinectの認識可能範囲内(80cm~4m)で遊べること\r\n  * (シャトルランをするので)画面を見なくても遊べること\r\n  * 「だるまさんが転んだ」の音声パターンは数種類あること\r\n\r\n### システム内容\r\nシステムの要件定義を満たす実装をするにあたり必要となる機能をまとめる。<br/>\r\n  1. 「だるまさんが転んだ」の再生処理\r\n  1. シャトルランの判定処理\r\n  1. だるまさんが転んだの動いてしまったかの判定処理(動いちゃた判定)\r\n\r\n#### 「だるまさんが転んだ」の再生処理\r\nこのパートは私が担当し、[playDaruMA.cs](http://bit.ly/1cZQHnc)で記述している。\r\nソース内で作成しているメソッドを次の図で示す。<br/>\r\n![playDaruma](https://github.com/HisatakaSuzuki/Kinect_Programming/blob/master/images/prog1.png?raw=true)<br/>\r\nSoundPlayerを使用して音声の再生を行っている。PlaySound()とStopSound()は外部のファイルからアクセスされることはなく、外部からはplay()を介して音声を再生するようになっている。\r\n当初サウンドは「だ」「る」「ま」「さ」「ん」「が」「こ」「ろ」「ん」「だ」の一音ずつの音声を\r\n準備して次の音声を呼ぶ間隔をランダムにして、<br/>「だるまさんがころんだ」にランダム性を持たせていた。\r\nしかしそれでは音と音の繋ぎの滑らかさが表現できなかったので、最終的には「だるまさんが転んだ」を\r\n一音声ファイルとしてそのパターンを6種類用意する方法に切り替えた。\r\n\r\n#### シャトルランの判定処理\r\nシャトルランの判定処理は[CheckClass.cs](http://bit.ly/19tMgA6)で記述している。\r\nソース内でポイントを追加するaddPoint()と進行方向を変えるchangeDir()を記述している。下図はaddPoint()である。\r\n![addPoint](https://github.com/HisatakaSuzuki/Kinect_Programming/blob/master/images/prog2.png?raw=true)<br/>\r\n上図のaddPoint()はプレイヤーの骨格情報sklSRと、プレイヤーのポイントcounterSRと、進行方向の情報flagSRを引数とし、\r\n進行方向による条件分岐にプレイヤーの骨格情報がポイントを加算するのにふさわしいかどうかをチェックする関数である。\r\nchangeDir()も同じ条件で進行方向を反転するかどうかをチェックする関数となっている。\r\n\r\n#### 動いちゃった判定の処理\r\n動いてはいけないときに動いてしまったときの処理は[JudgeClass.cs](http://bit.ly/19tSCPX)で記述している。\r\nこの処理で一番大事な処理が下図のJudge_Skel()関数である。<br/>\r\n![Judge_Skel](https://github.com/HisatakaSuzuki/Kinect_Programming/blob/master/images/prog3.png?raw=true)<br/>\r\nこの関数を呼び出すことで、頭と両手の骨格情報と保存した骨格情報の差異でプレイヤーが動いたかどうかを判定している。\r\n\r\n### 遊び方マニュアル\r\n#### 遊びの流れ\r\n  1. Kinectの認識範囲内に入る。\r\n  1. 「だるまさんが転んだ」の音声が再生されたら下図の①と②の間でシャトルランを行う。\r\n  1. 音声が鳴りやんだ時には、静止しなくてはならない。\r\n  1. 遊びの流れ2と3をゲームオーバーになるまで繰り返す。\r\n![システム図](https://github.com/HisatakaSuzuki/Kinect_Programming/blob/master/images/system.png?raw=true)\r\n\r\n#### 得点\r\n  * 上図の①と②の間でシャトルランの切り替えしの成功時に得点が入る。\r\n\r\n#### ゲームオーバー\r\n  * 遊びの流れ3の時に動いていると判定された場合はゲームオーバーとなる。\r\n\r\n### 発表\r\n画面を見ないでも遊べる設計にするために、当初はプレイヤーの方向転換のときに決まった音声で知らせる仕様にする予定でしたが、発表には間に合わなかったのでテープで線を引くことで代用した。\r\n発表時には1人プレイで問題なく動いたが、テストが甘かったので判定が厳しすぎてしまった。\r\n\r\n### 反省\r\n  * ゲームデザインがうまくできていなかった。<br/>\r\n　  ┗プレイに終わる区切りがない(ゲームオーバーになるしかない)\r\n  * 結合に苦戦してしまった。<br/>\r\n    ┗変数の定義や、必要な動作などをしっかり決める前に各々で作業に入ってしまった。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}